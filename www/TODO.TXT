TODO:

- Let the public access the curriculum-ave and element-ave
  widgets, but prohibit them from adding/editing content...
  Also, remove the workflow action buttons!
- Think about flushing "enabled rows" after publishing.
  (maybe via a WF "side effect")
- Assignees and notifications in workflow.
- Documentation.
- Optimize bar and admin page queries (compare with the
  user page query!). 
- Fix desc truncation and the "more" link on index page.
  (dbms_lob.instr() doesn't return the substr on Oracle ...)
- Host problem in ext.tcl and remove-from-bar.tcl
  ("hostname" vs. "localhost").
- Deleting the curriculum package when both curriculums
  and elements are created work in PG, but not on Oracle.


QUESTIONS:

Q: Does "cu_user_element_map" need a curriculum_id column,
   completion_date, etc?
A: Yes, to be able to delete rows representing individual
   curriculums.

Q: Register filter or proc upon adding of a subsite-external
   element to bring the current bar into the picture?
A: Maybe.


DONE:

- Move workflow page under /admin.
- Make published curriculums alone be displayable as bars.
- Facilitate tracking of external elements.
  (click-through page and ad_httpget)
- Enable the bar to be displayed on exernal pages
  (ns_httpget for instance ...).
- Create user view (index page).
- create table "cu_user_curriculum_map" so that logged in
  users get to choose which curriculums to participate in.
- Add an outer join with "cu_user_curriculum_map" to the
  bar and index page queries to filter out the users desired
  curriculums among the published ones.
- Add scripts to add/remove desired curriculums.
- When you mount a new subsite that not yet have curriculum
  mounted anywhere under it, URLs in that subsite crap out 
  because "enabled_elements" takes a package_id param, but 
  "conn" just returns {} without a curriculum instance mounted.
- I believe that the sort order is wrong in the "bar query" -
  or am I being fooled by a caching issue?
- Fix question mark in the curriculum bar.
- Normally, flushing of the cache should be done globally -
  not per user and instance!
  ("util_memoize_flush_regexp" is pretty expensive considering
  that each user has one cache per instance, so we provided
  a link instead, that the admin should hit when done admin'ing.)